// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CkgPingClient is the client API for CkgPing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CkgPingClient interface {
	// Ping ping
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type ckgPingClient struct {
	cc grpc.ClientConnInterface
}

func NewCkgPingClient(cc grpc.ClientConnInterface) CkgPingClient {
	return &ckgPingClient{cc}
}

func (c *ckgPingClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/pingpb.CkgPing/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CkgPingServer is the server API for CkgPing service.
type CkgPingServer interface {
	// Ping ping
	Ping(context.Context, *PingReq) (*PingResp, error)
}

// UnimplementedCkgPingServer can be embedded to have forward compatible implementations.
type UnimplementedCkgPingServer struct {
}

func (*UnimplementedCkgPingServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterCkgPingServer(s *grpc.Server, srv CkgPingServer) {
	s.RegisterService(&_CkgPing_serviceDesc, srv)
}

func _CkgPing_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CkgPingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pingpb.CkgPing/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CkgPingServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CkgPing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pingpb.CkgPing",
	HandlerType: (*CkgPingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CkgPing_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ping.proto",
}
